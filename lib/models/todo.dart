import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'todo.g.dart';

/// {@template todo}
/// A single tourism todo item.
/// [Todo]s are immutable and can be copied using [copyWith]
/// {@endtemplate}
@JsonSerializable()
class Todo extends Equatable {
  /// {@macro todo}
  const Todo({
    required this.id,
    required this.uploaderId,
    required this.uploaderName,
    required this.shortDescription,
    required this.nature,
    required this.address,
    this.latitude,
    this.longitude,
    required this.detailedDescription,
    required this.imageReferences
  });

  /// Creates a Todo from a json (map) representation
  /// when querying from Cloud Firestore
  /// Generated by build_runner; has to be regenerated when the class changes
  /// {@macro todo}
  factory Todo.fromJson(Map<String, dynamic> json) => _$TodoFromJson(json);

  /// The unique identifier of the todo.
  ///
  /// Cannot be empty.
  final String id;

  /// The unique identifier of the user who created this item.
  ///
  /// Cannot be empty.
  final String uploaderId;

  /// The name of the user who created this item.
  ///
  /// Cannot be empty.
  final String uploaderName;

  /// The short description of the todo.
  ///
  /// Cannot be empty.
  final String shortDescription;

  /// The nature of the todo.
  /// There are no constraints to the nature, besides that it must be a valid string.
  /// Cannot be empty.
  final String nature;

  /// The address (address) of the todo, where it can be found and done.
  /// There are no constraints to the address, besides that it must be a valid string.
  /// Geocoding will be run on this value, but it does not have to be successful.
  /// Cannot be empty.
  final String address;

  /// The coordinates of this todo, if geocoding was successful
  /// If it was not, they are null
  final double? latitude;
  /// The coordinates of this todo, if geocoding was successful
  /// If it was not, they are null
  final double? longitude;

  /// The detailed description of the todo.
  ///
  /// Cannot be empty.
  final String detailedDescription;

  /// References of the images the creator user attached to this todo.
  /// If there aren't any, it's an empty list.
  final List<String> imageReferences;

  /// Returns a copy of this todo with the given values updated.
  ///
  /// {@macro todo}
  Todo copyWith({
    String? id,
    String? uploaderId,
    String? uploaderName,
    String? shortDescription,
    String? nature,
    String? address,
    double? latitude,
    double? longitude,
    String? detailedDescription,
    List<String>? imageReferences
  }) {
    return Todo(
        id: id ?? this.id,
        uploaderId: uploaderId ?? this.uploaderId,
        uploaderName: uploaderName ?? this.uploaderName,
        shortDescription: shortDescription ?? this.shortDescription,
        nature: nature ?? this.nature,
        address: address ?? this.address,
        latitude: latitude ?? this.latitude,
        longitude: longitude ?? this.longitude,
        detailedDescription: detailedDescription ?? this.detailedDescription,
        imageReferences: imageReferences ?? this.imageReferences
    );
  }

  /// Returns a json (map) representation of this Todo
  /// for uploading it to Cloud Firestore.
  /// Generated by build_runner; has to be regenerated when the class changes
  /// {@macro todo}
  Map<String, dynamic> toJson() => _$TodoToJson(this);

  @override
  List<Object?> get props =>
      [
        id,
        uploaderId,
        uploaderName,
        shortDescription,
        nature,
        address,
        latitude,
        longitude,
        detailedDescription,
        imageReferences
      ];
}