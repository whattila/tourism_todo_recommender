import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'rating.g.dart';

/// A rating a user gives to a todo.
@JsonSerializable()
class Rating extends Equatable {
  const Rating._({
    this.todoId,
    this.userId,
    required this.value,
  });

  factory Rating({String? todoId, String? userId, required int value}) {
    if (value > maxRatingValue || value < minRatingValue) {
      throw ArgumentError('Invalid value parameter');
    }
    return Rating._(todoId: todoId, userId: userId, value: value);
  }

  /// The minimum rating a user can give.
  static const minRatingValue = 1;

  /// The maximum rating a user can give.
  static const maxRatingValue = 5;

  /// Creates a [Rating] from a json (map) representation
  /// when querying from Cloud Firestore
  /// Generated by build_runner; has to be regenerated when the class changes
  factory Rating.fromJson(Map<String, dynamic> json) => _$RatingFromJson(json);

  /// Internal constructor for creating the empty static.
  /// This is the ONLY case when value can be 0.
  const Rating._empty() : this._(value: 0);

  // mi van, ha a kÃ©t id nem lenne nullable?

  /// The id of the todo this rating refers to
  @JsonKey(ignore: true)
  final String? todoId;

  /// The id of the user who gave this rating
  @JsonKey(ignore: true)
  final String? userId;

  /// The current value of the rating.
  final int value;

  /// Empty rating which is used at todos the user haven't given any rating.
  static const empty = Rating._empty();

  /// Convenience getter to determine whether this Rating object is empty.
  bool get isEmpty => this == Rating.empty;

  /// Convenience getter to determine whether this Rating object is not empty.
  bool get isNotEmpty => this != Rating.empty;

  /// Returns a copy of this [Rating] with the given values updated.
  Rating copyWith({String? todoId, String? userId, int? value})
    => Rating(
        todoId: todoId ?? this.todoId,
        userId: userId ?? this.userId,
        value: value ?? this.value
      );

  /// Returns a json (map) representation of this [Rating]
  /// for uploading it to Cloud Firestore.
  /// Generated by build_runner; has to be regenerated when the class changes
  Map<String, dynamic> toJson() => _$RatingToJson(this);

  @override
  List<Object?> get props => [todoId, userId, value];
}